---
# tasks file for play/roles/lxc-node

- name: Create container with LXD
  connection: local
  become: false
  lxd_container:
    name: "{{ inventory_hostname }}"
    state: started
    cert_file: "{{ lxc_client_cert }}"
    key_file: "{{ lxc_client_key }}"
    url: "https://{{ lxc_lxd_host }}:{{ lxc_lxd_port }}"
    source:
      type: image
      mode: pull
      server: "{{ lxc_image_source }}"
      protocol: simplestreams
      alias: "{{ lxc_container_distro }}"
    profiles: "{{ lxc_profiles }}"
    wait_for_ipv4_addresses: true
    timeout: 10
#  notify:
#  - send rocketchat message

- name: Set temporary ansible_host for lxd connection
  set_fact:
    ansible_host: "{{ lxc_lxd_host }}:{{ inventory_hostname }}"

- name: Check if sudo is installed in container
  connection: lxd
  become: false
  raw: dpkg -s sudo
  register: sudo_check_is_installed
  failed_when: sudo_check_is_installed.rc not in [0,1]
  changed_when: false

- name: Install sudo in container
  connection: lxd
  become: false
  raw: apt-get update && apt-get install sudo
  when: sudo_check_is_installed.rc == 1

- name: Check if Python2 is installed in container
  connection: lxd
  become: false
  raw: dpkg -s python
  register: python_check_is_installed
  failed_when: python_check_is_installed.rc not in [0,1]
  changed_when: false

- name: Install Python2 in container
  connection: lxd
  become: false
  raw: apt-get update && apt-get install -y python
  when: python_check_is_installed.rc == 1

#- name: Make sudo group without passwd prompt
#  connection: lxd
#  become: false
#  raw: sed -i $'s/\t/ /g' /etc/sudoers && sed -i 's/%sudo\ ALL=(ALL:ALL)\ ALL/%sudo\ ALL=(ALL:ALL)\ NOPASSWD:ALL/g' /etc/sudoers
#  when: sudo_check_is_installed.rc == 1

- name: Make sudo group without passwd prompt
  connection: lxd
  lineinfile:
    path: /etc/sudoers
    state: present
    regexp: '^%sudo\s'
    line: '%sudo ALL=(ALL) NOPASSWD: ALL'

- name: Check if {{ ansible_ssh_user }} user exists in container
  connection: lxd
  become: false
  raw: "id -u {{ ansible_ssh_user }}"
  register: user_is_existant
  failed_when: user_is_existant.rc not in [0,1]
  changed_when: false

- name: Create {{ ansible_ssh_user }} user in container
  connection: lxd
  become: false
  raw: "useradd -U -d /home/ubuntu -m  -p lepass -s /bin/bash -c 'Container admin' {{ ansible_ssh_user }}"
  when: user_is_existant.rc == 1

- name: Check if user {{ ansible_ssh_user }} is in the sudo group
  connection: lxd
  become: false
  raw: id -Gn ubuntu | grep sudo
  register: user_is_sudo_group
  failed_when: user_is_sudo_group.rc not in [0,1]
  changed_when: false

- name: Add user {{ ansible_ssh_user }} in sudo group
  connection: lxd
  become: false
  raw: "adduser {{ ansible_ssh_user }} sudo"
  when: user_is_sudo_group.rc == 1

- name: Check if SSH is installed in container
  connection: lxd
  become: false
  raw: dpkg -s ssh
  register: ssh_check_is_installed
  failed_when: ssh_check_is_installed.rc not in [0,1]
  changed_when: false

- name: Install SSH in container
  connection: lxd
  become: false
  raw: apt-get update && apt-get install -y ssh
  when: ssh_check_is_installed.rc == 1

- name: Copy ssh keys in container
  connection: lxd
  authorized_key:
    user: "{{ ansible_ssh_user }}"
    state: present
    key: "{{ lookup('file', lookup('env','HOME') + '/.ssh/id_ed25519.pub') }}"

- name: Restore ansible_host for ssh connection
  set_fact:
    ansible_host: "{{ inventory_hostname }}"

- name: Gather facts
  setup:

- name: Ensure ssh is started and enabled to start at boot.
  service: name=ssh state=started enabled=yes
